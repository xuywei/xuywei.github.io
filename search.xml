<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RxJava原理]]></title>
      <url>http://23.106.148.149/android/android/RxJava%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2>]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql常用命令]]></title>
      <url>http://23.106.148.149/mysql/mysql/mysql%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h2><blockquote>
<p>basedir = D:\mysql-5.6.34-winx64<br>datadir = D:\mysql-5.6.34-winx64\data<br>character-set-server=utf8 # 这一行是出现字符集问题的时候要设置的，暂时不用管</p>
</blockquote>
<a id="more"></a>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqld install</div><div class="line">对应卸载:mysqld remove</div></pre></td></tr></table></figure>
<h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">net start mysql</div><div class="line">对应关闭：net stop mysql</div></pre></td></tr></table></figure>
<h2 id="设置root用户的密码"><a href="#设置root用户的密码" class="headerlink" title="设置root用户的密码"></a>设置root用户的密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL ON *.* TO &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</div></pre></td></tr></table></figure>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;123456&apos;);</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h3 id="方法三-不用进入mysql-cmd-："><a href="#方法三-不用进入mysql-cmd-：" class="headerlink" title="方法三(不用进入mysql cmd)："></a>方法三(不用进入mysql cmd)：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root -p password &quot;123456&quot;</div></pre></td></tr></table></figure>
<h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">USE mysql;#开启mysql的数据库</div><div class="line">UPDATE mysql.user SET password=password(&apos;123456&apos;) where user=&apos;sxw&apos; and host=&apos;localhost&apos;;#更新password字段</div></pre></td></tr></table></figure>
<h2 id="mysql提示符"><a href="#mysql提示符" class="headerlink" title="mysql提示符"></a>mysql提示符</h2><p>mysql -uroot -p -P3306 -h127.0.0.1 –promat \D\d\h\u # 分别是具体时间，数据库名字，主机名，用户名</p>
<h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><h3 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CREATE user &apos;sxw&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</div><div class="line">GRANT ALL PRIVILEGES ON *.* to &apos;sxw&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;# 如果想远程登陆，将localhost替换为%，表示在任何一台电脑都可以登陆</div></pre></td></tr></table></figure>
<h3 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">INSERT INTO mysql.user(HOST,USER,PASSWORD) VALUES (&apos;localhost&apos;,&apos;sxw&apos;,PASSWORD(&apos;123456&apos;));</div><div class="line">GRANT SELECT,UPDATE,CREATE,DROP,DELETE ON sxwDB.* TO &apos;sxw&apos;@&apos;%&apos;IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;#授权sxw用户对sxwDB这个数据库的所有表具有所有权限</div><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<h2 id="查看MySQL版本"><a href="#查看MySQL版本" class="headerlink" title="查看MySQL版本"></a>查看MySQL版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">方法一：status;</div><div class="line">方法二：select version();</div></pre></td></tr></table></figure>
<h2 id="查看MySQL端口号"><a href="#查看MySQL端口号" class="headerlink" title="查看MySQL端口号"></a>查看MySQL端口号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show global variables like &apos;port&apos;;</div></pre></td></tr></table></figure>
<h2 id="查看当前打开的数据库"><a href="#查看当前打开的数据库" class="headerlink" title="查看当前打开的数据库"></a>查看当前打开的数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select database();</div></pre></td></tr></table></figure>
<h2 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select now();</div></pre></td></tr></table></figure>
<h2 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select user();</div></pre></td></tr></table></figure>
<h2 id="查看当前所有用户名，密码，主机名"><a href="#查看当前所有用户名，密码，主机名" class="headerlink" title="查看当前所有用户名，密码，主机名"></a>查看当前所有用户名，密码，主机名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select user,password,host from mysql.user;</div></pre></td></tr></table></figure>
<h2 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure>
<h2 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use sxw;</div></pre></td></tr></table></figure>
<h2 id="列出所有表"><a href="#列出所有表" class="headerlink" title="列出所有表"></a>列出所有表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure>
<h2 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">describe table_name;</div></pre></td></tr></table></figure>
<h2 id="删除数据库和数据表"><a href="#删除数据库和数据表" class="headerlink" title="删除数据库和数据表"></a>删除数据库和数据表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">drop database sxw;</div><div class="line">drop table table_name;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkDowm语法]]></title>
      <url>http://23.106.148.149/other/other/MarkDowm%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我是代码区块</div><div class="line">我可以用三个`包围也可以用一个tab或者4个空格</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 一级</div><div class="line">## 二级</div><div class="line">### 三级</div><div class="line">###### 六级</div></pre></td></tr></table></figure>
<h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h6 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h6><hr>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#### 无序列表</div><div class="line">- 文本一</div><div class="line">- 文本二</div><div class="line">- 文本三</div></pre></td></tr></table></figure>
<ul>
<li>文本一</li>
<li>文本二</li>
<li>文本三</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 文本1 </div><div class="line">2. 文本2</div><div class="line">3. 文本3</div></pre></td></tr></table></figure>
<ol>
<li>文本1 </li>
<li>文本2</li>
<li>文本3<h4 id="有序列表-1"><a href="#有序列表-1" class="headerlink" title="有序列表"></a>有序列表</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 文本1 </div><div class="line">* 文本2</div><div class="line">* 文本3</div></pre></td></tr></table></figure>
<ul>
<li>文本1 </li>
<li>文本2</li>
<li>文本3<h4 id="有序列表-2"><a href="#有序列表-2" class="headerlink" title="有序列表"></a>有序列表</h4></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ 文本1 </div><div class="line">+ 文本2</div><div class="line">+ 文本3</div></pre></td></tr></table></figure>
<ul>
<li>文本1 </li>
<li>文本2</li>
<li>文本3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.文本一</div><div class="line">2.文本二</div><div class="line">3.文本三</div><div class="line">4.文本四</div></pre></td></tr></table></figure>
<p>1.文本一<br>2.文本二<br>3.文本三<br>4.文本四</p>
<p>##引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 引用</div><div class="line">&gt; 引用</div><div class="line">&gt;&gt; 引用的引用</div></pre></td></tr></table></figure></p>
<blockquote>
<p>引用<br>引用</p>
<blockquote>
<p>引用的引用</p>
</blockquote>
</blockquote>
<h4 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[百度](http://www.baidu.com)</div><div class="line">![图片的注释](http://upload-images.jianshu.io/upload_images/1654122-944084426a300bc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com" target="_blank" rel="external">百度</a><br><img src="http://upload-images.jianshu.io/upload_images/1654122-944084426a300bc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片的注释"></p>
<h4 id="字体的规格"><a href="#字体的规格" class="headerlink" title="字体的规格"></a>字体的规格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*斜体*</div><div class="line">**粗体**</div><div class="line">***斜粗体***</div><div class="line">~~删除的字体~~</div></pre></td></tr></table></figure>
<p><em>斜体</em><br><strong>粗体</strong><br><strong><em>斜粗体</em></strong><br><del>删除的字体</del><br><code>高亮的你看见了么</code>比较一下</p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|dog | bird | cat|</div><div class="line">|----|----|---|</div><div class="line">|foo | foo | foo|</div><div class="line">|bar | bar | bar|</div><div class="line">|baz | baz | baz|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>dog</th>
<th>bird</th>
<th>cat</th>
</tr>
</thead>
<tbody>
<tr>
<td>foo</td>
<td>foo</td>
<td>foo</td>
</tr>
<tr>
<td>bar</td>
<td>bar</td>
<td>bar</td>
</tr>
<tr>
<td>baz</td>
<td>baz</td>
<td>baz</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MarkDown语法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git疑难杂症总结]]></title>
      <url>http://23.106.148.149/Git/git/git%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
      <content type="html"><![CDATA[<h2 id="git远程仓库同步-历史提交不同导致错误"><a href="#git远程仓库同步-历史提交不同导致错误" class="headerlink" title="git远程仓库同步,历史提交不同导致错误"></a>git远程仓库同步,历史提交不同导致错误</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><img src="http://upload-images.jianshu.io/upload_images/1654122-69115bc264b92f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题"><br><a id="more"></a><br>这是在2.9版本git之后出现的问题，就是当发现不同的历史时（已经有人提交过，一般情况下只会出现一次这样的情况）</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master --allow-unrelated-histories</div></pre></td></tr></table></figure>
<h2 id="gitignore不生效"><a href="#gitignore不生效" class="headerlink" title=".gitignore不生效"></a>.gitignore不生效</h2><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><p>之前add进版本库的文件，现在添加了一个.gitignore文件后，不希望之前跟踪过的文件被跟踪了</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached . #删除追踪状态</div><div class="line">git add . </div><div class="line">git commit -m &quot;fixed untracked files&quot;</div></pre></td></tr></table></figure>
<h2 id="git文件夹导致不能跟踪文件"><a href="#git文件夹导致不能跟踪文件" class="headerlink" title=".git文件夹导致不能跟踪文件"></a>.git文件夹导致不能跟踪文件</h2><h3 id="问题描述：本地git-add-后查看git-status"><a href="#问题描述：本地git-add-后查看git-status" class="headerlink" title="问题描述：本地git add .后查看git  status"></a>问题描述：本地git add .后查看git  status</h3><p>出现modified: xxx(modified content, untracked content)<br>大概意思是xxx目录没有被跟踪。那自然push上去的时候是空的了<br>解决办法：<br>主要是xxx目录下有一个.git 目录，删除.git目录，重新git add .后续操作</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git疑难杂症 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git教程(二)]]></title>
      <url>http://23.106.148.149/Git/git/git%E6%95%99%E7%A8%8B(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="git的本地操作"><a href="#git的本地操作" class="headerlink" title="git的本地操作"></a>git的本地操作</h2><p>首先先提出一个仓库的概念，git的仓库概念就是处处都是仓库，所以我可以轻易的clone本地的一些用git管理起来的文件夹（也就是书面语仓库），这里特别提一下服务器端的仓库，当然你可以像其他基本仓库一样，但是这样也就没有了服务器的优势（不可视，就比如linux服务器全部以无界面命令来进行操作，这样也就间接的避免了好多界面话导致的木马病毒的侵入），所以就有了裸仓库一说。服务器的git管理的最好是一个裸仓库。你也不需要在服务器端进行文件的一系列操作。万一误删了肿么办，死都不知道咋死的。。。<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/1654122-be60690475a04540.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两种仓库概念仓库"></p>
<h3 id="在github上进行仓库的实战"><a href="#在github上进行仓库的实战" class="headerlink" title="在github上进行仓库的实战"></a>在github上进行仓库的实战</h3><p><img src="http://upload-images.jianshu.io/upload_images/1654122-ec43b579d93a59d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>README文件初学者建议不选。这个文件就是项目的说明文档，也就是你可以在里边写项目描述啥的，语法支持markdown如有需要请移步我的markdown文章，<a href="http://www.jianshu.com/p/76a747786b04" target="_blank" rel="external">MarkDown语法</a></p>
<p>创建仓库之后你会看到你的仓库地址，就是https协议地址：</p>
<blockquote>
<p><a href="https://github.com/***" target="_blank" rel="external">https://github.com/***</a> </p>
</blockquote>
<p>还有ssh协议地址 git@github.com/<em>*</em><br>不同的协议在你和仓库交互的时候会有不同的形式，前面我也说了，https你要输入github的用户名密码验证你自己的权限，ssh就是用之前生成和配置的rsa来验证，简化了输入账号密码的繁琐，而且安全了不止多少倍。<br><img src="http://upload-images.jianshu.io/upload_images/1654122-6a23bff0885955e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不同协议下的仓库地址"><br>好了，远程仓库 我们利用github这个网站创建好了，下面该提交咱们的代码到这个仓库了。</p>
<p>##git本地仓库创建、增加远程仓库依赖、提交、同步代码到远程和本地<br>这里咱们用一个很好玩的操作练习一下，这样大家都知道git远程仓库的本来面目了，你可以随便玩一玩，是不是感觉其实git也没什么高端的呢，哈哈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone **************.git --depth=1克隆深度1</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-b0c4a87b9cf3108d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地仓库模拟远程仓库"><br>从上面图中可以看到cp命令(copy)，rm(remove)，cd(come into dir)<br>git add .将工作区中的所有文件跟踪进暂存区，git commit -m “”将暂存区的文件提交到仓库区，git status查看3大区的状态(绿色代表暂存区和仓库区没同步，红色代表工作区和暂存区没同步，像上边nothing to commit，working directory clean就是代表3大区全部同步完毕)只有全部同步完成后才能进行pull和push操作，git pull origin master将名字为origin的远程仓库中的名字为master的分支上的文件同步到本地工作区中，如果文件不存在冲突情况下，pull操作也会进行3大区的同步工作，特别情况下冲突了，无法进行同步，你就要自己同步了，先git status看一下哪个文件冲突了，修改后git add .和git commit -m “”工作区干净了之后就可以git push origin master这里我就不解释origin和master了，和pull一样，现在你也可以试一试了，不要怕错，git会永远保存你提交到仓库里的文件，每一次commit都会记录到git提交历史中，你可以进行回退到固定版本，查看历史提交的任何信息(记住是任何，所以不要怕丢文件，当然你只add不commit是不行的，这里你的电脑不挂就会永久保存，当然你不可能随时带着你的电脑了，可以将本地仓库文件push到远程仓库，除非放仓库文件的服务器仓库挂了，你的文件可以永久保存，并实时clone下来查看任何信息)</p>
<p>##本篇结语</p>
<blockquote>
<p>流程通俗讲：文件—git管理版本–&gt;保存在你电脑上–提交—&gt;保&gt;存到git的版本中，就是.git文件夹中，我就不带你们看了，怕你们迷-&gt;–push–&gt;远程服务器文件，当然.git文件夹也是一起push过去的，&gt;所以每次clone都是带一切版本历史纪录的</p>
</blockquote>
<p>所以其实也就是一个被git管理每一次文件版本的文件在本地电脑和服务器电脑上互相同步数据。<br>语言组织好费脑细胞啊，请各位码友别介意哈^_^</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git本地提交 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git教程(三)]]></title>
      <url>http://23.106.148.149/Git/git/git%E6%95%99%E7%A8%8B(%E4%B8%89)/</url>
      <content type="html"><![CDATA[<h2 id="git的远程和本地的同步交互操作"><a href="#git的远程和本地的同步交互操作" class="headerlink" title="git的远程和本地的同步交互操作"></a>git的远程和本地的同步交互操作</h2><blockquote>
<p>当本地的文件被git管理后，我们之前讲过了一些本地的操作，主要都是在工作区和暂存区进行操作，但是我们不能只在本地玩啊是不是，这不，我们下面就讲同步你的本地代码到服务器上去，也叫远程仓库。</p>
</blockquote>
<a id="more"></a>
<h2 id="再贴一下git的本地操作"><a href="#再贴一下git的本地操作" class="headerlink" title="再贴一下git的本地操作"></a>再贴一下git的本地操作</h2><p><img src="http://upload-images.jianshu.io/upload_images/1654122-d7fe4a18bdef896d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<blockquote>
<p>下面要在服务器里创建一个仓库，我们这里没有自己的，就用第三方的吧，这里自己百度一下好吧<del>~</del>~~~</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git remote add 远程仓库的名字 远程地址  # 对应的中文对应你的仓库名字和地址，地址是你创建仓库之后给你的唯一地址，名字的话，默认是origin，当然你你可以自己起名，比如baby哈哈</div><div class="line">git pull origin master</div><div class="line">git push origin master</div><div class="line">git push -u origin master#以后提交都是origin master，以后就只打git push就行了，pull同理</div><div class="line">git pull -u origin master</div></pre></td></tr></table></figure>
<p>ok了，去远程仓库看一下，代码都同步好了。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git同步远程仓库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git教程(一)]]></title>
      <url>http://23.106.148.149/Git/git/git%E6%95%99%E7%A8%8B(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="git安装和初始化配置"><a href="#git安装和初始化配置" class="headerlink" title="git安装和初始化配置"></a>git安装和初始化配置</h2><p>什么是git，为什么用git，这些百度一大堆，我就不废话了，直接进入怎么用这个环节。<br>git有远程仓库和本地仓库之分，远程仓库必须是裸仓库，本地仓库之间可以互相clone但是不能进行pull，push等提交和拉取远程数据，只有裸仓库才能进行多用户针对远程仓库的数据交互操作。这里的仓库类型后面会有介绍，不懂得看到后边就懂了。<br><a id="more"></a></p>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>我用的是windows系统，这里只粘贴一下windows的git地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://git-for-windows.github.io/#contribute   window的git安装网址</div></pre></td></tr></table></figure></p>
<p>安装属于傻瓜式，下一步、下一步、下一步、、、完成。<br>安装完成之后你可以用鼠标右键一下，有git base here(输入shell命令，ssh命令等，最重要的是git命令可以敲了，其他的别管了)和git gui here(小白的图形化界面，不过我强烈不推荐用这个，后面的教程全部都是命令行形式的，没几个命令，也属于装逼神器)这两个选项了代表成功了。</p>
<h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>对于团队开发，用版本控制工具很大程度上是为了团队之间开发的沟通，git配置也就是设置一些自己在这个项目中的身份和标识，这样以后看开发日志就可以解决一些代码冲突等的一些问题。下面的带–global的代表的是全局的，你可以在~/.gitconfig文件中看到你的所有配置，你可以直接编辑它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">命令：git config --global user.name XXX设置姓名</div><div class="line">          git config --global user.email xxx@xxx.com设置邮箱</div><div class="line">          git config --get user.name查看姓名</div><div class="line">          git config --global user.name查看姓名</div><div class="line">          git config --global --add user.name XX增加姓名，不过以最后一个add的为主</div><div class="line">          git config --global --unset user.name XX去除姓名</div><div class="line">          git config --list --global查看global配置</div><div class="line">          git config --global alias.xx &quot;比如log oneline&quot;设置快捷命令</div><div class="line">比如git log --oneline --graph配置为git config --global alias.mylog log --oneline --graph 以后你就可以这样敲了git mylog（我是没用过，还是喜欢敲满字符，也懒得设置了）</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-f4121a45e9a244f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-33cf46a0c62a2e3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看配置"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-867ae6fa56582b49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改配置"></p>
<p>###git Rsa配置<br>当你与服务器交互时，一定会设置代码安全方面的问题，这个就好比是你登陆系统时，服务器会要求你输入用户名和密码一样，git与服务器之间也是这样，必须要标识你是可以操作的用户，这样才能保证你是被赋予管理代码权限的用户。但是输入用户名密码操作太过于繁琐，所以git不止支持http协议，更支持ssh协议，ssh协议地址，你可以用私钥公钥的形式让服务器验证你的权限。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-bbf3a46e2ac53559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成公钥私钥"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-86a788d3c7961f30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github中ssh public key（公钥）的添加"><br>ok，现在你可以用ssh命令连接一下远程仓库了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1654122-a276aa422309c0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="公钥私钥的验证登陆"></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git安装初始化配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例设计模式]]></title>
      <url>http://23.106.148.149/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/design_mode/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="设计模式系列开题报告"><a href="#设计模式系列开题报告" class="headerlink" title="设计模式系列开题报告"></a>设计模式系列开题报告</h2><p>做了多年的开发，对设计模式也早有汇总一下的想法，暂时这个系列写到哪算哪，毕竟还有很多工作要做啊，真羡慕那些还在学校的童鞋，有时间研究新技术新领域。<br>不说废话，直接上代码：</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp使用详解]]></title>
      <url>http://23.106.148.149/android/android/OkHttp%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="Interceptor详解"><a href="#Interceptor详解" class="headerlink" title="Interceptor详解"></a>Interceptor详解</h2><h3 id="什么是Interceptor："><a href="#什么是Interceptor：" class="headerlink" title="什么是Interceptor："></a>什么是Interceptor：</h3><blockquote>
<p>Interceptor翻译过来就是拦截器，它是OkHttp网络请求中抓取请求和响应必须的一个全能王。</p>
</blockquote>
<p>你如果用过okhttp，一定对HttpLoggingInterceptor不陌生，这个是squareup公司写的一个样板，其实它呢也就是告诉你了任何你想拿到的数据。看源码么，go。。。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line">public final class HttpLoggingInterceptor implements Interceptor &#123;</div><div class="line">  private static final Charset UTF8 = Charset.forName(&quot;UTF-8&quot;);</div><div class="line">//设置拦截级别，枚举4种</div><div class="line">  public enum Level &#123;</div><div class="line">    NONE,</div><div class="line">    BASIC,</div><div class="line">    HEADERS,</div><div class="line">    BODY</div><div class="line">  &#125;</div><div class="line">。。。。。。。。。。</div><div class="line">。。。。。。。。。。</div><div class="line">。。。。。。。。。。</div><div class="line">  @Override public Response intercept(Chain chain) throws IOException &#123;</div><div class="line">    Level level = this.level;</div><div class="line">    Request request = chain.request();</div><div class="line">    if (level == Level.NONE) &#123;</div><div class="line">      //不拦截，直接返回</div><div class="line">      return chain.proceed(request);</div><div class="line">    &#125;</div><div class="line">    boolean logBody = level == Level.BODY;</div><div class="line">    boolean logHeaders = logBody || level == Level.HEADERS;</div><div class="line">    RequestBody requestBody = request.body();</div><div class="line">    boolean hasRequestBody = requestBody != null;</div><div class="line">    //建立连接</div><div class="line">    Connection connection = chain.connection();</div><div class="line">    //拿到连接协议，如果连接不存在就直接用http_1_1协议</div><div class="line">    Protocol protocol = connection != null ? connection.protocol() : Protocol.HTTP_1_1;</div><div class="line">    String requestStartMessage = &quot;--&gt; &quot; + request.method() + &apos; &apos; + request.url() + &apos; &apos; + protocol;</div><div class="line">    //如果设置的级别是base，就打印头部分</div><div class="line">    if (!logHeaders &amp;&amp; hasRequestBody) &#123;</div><div class="line">      requestStartMessage += &quot; (&quot; + requestBody.contentLength() + &quot;-byte body)&quot;;</div><div class="line">    &#125;</div><div class="line">    logger.log(requestStartMessage);</div><div class="line">    //如果设置的级别是头，就打印头部分</div><div class="line">    if (logHeaders) &#123;</div><div class="line">      //如果有请求体，就将请求体的长度和类型打印</div><div class="line">      if (hasRequestBody) &#123;</div><div class="line">        //请求头的值，存在就拦截</div><div class="line">        if (requestBody.contentType() != null) &#123;</div><div class="line">          logger.log(&quot;Content-Type: &quot; + requestBody.contentType());</div><div class="line">        &#125;</div><div class="line">        //-1代表请求数据长度0</div><div class="line">        if (requestBody.contentLength() != -1) &#123;</div><div class="line">          logger.log(&quot;Content-Length: &quot; + requestBody.contentLength());</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      //请求头部分，遍历打印</div><div class="line">      Headers headers = request.headers();</div><div class="line">      for (int i = 0, count = headers.size(); i &lt; count; i++) &#123;</div><div class="line">        String name = headers.name(i);</div><div class="line">        // 这里因为上面已经打印了，所以就过滤一下</div><div class="line">        if (!&quot;Content-Type&quot;.equalsIgnoreCase(name) &amp;&amp; !&quot;Content-Length&quot;.equalsIgnoreCase(name)) &#123;</div><div class="line">          logger.log(name + &quot;: &quot; + headers.value(i));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      //没有请求体，或者等级没有设置为打印请求体，结束打印</div><div class="line">      if (!logBody || !hasRequestBody) &#123;</div><div class="line">        logger.log(&quot;--&gt; END &quot; + request.method())；</div><div class="line">      &#125; else if (bodyEncoded(request.headers())) &#123;</div><div class="line">        //有请求体或者log等级设置为body，打印请求头中设置的编码</div><div class="line">        logger.log(&quot;--&gt; END &quot; + request.method() + &quot; (encoded body omitted)&quot;);</div><div class="line">      &#125; else &#123;</div><div class="line">        //将请求体数据给写进缓存流</div><div class="line">        Buffer buffer = new Buffer();</div><div class="line">        requestBody.writeTo(buffer);</div><div class="line">        //设置编码为utf-8</div><div class="line">        Charset charset = UTF8;</div><div class="line">        MediaType contentType = requestBody.contentType();</div><div class="line">        if (contentType != null) &#123;</div><div class="line">          charset = contentType.charset(UTF8);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.log(&quot;&quot;);</div><div class="line">      //判断是否是人类可读的字符，是就打印</div><div class="line">        if (isPlaintext(buffer)) &#123;</div><div class="line">          logger.log(buffer.readString(charset));</div><div class="line">          logger.log(&quot;--&gt; END &quot; + request.method()</div><div class="line">              + &quot; (&quot; + requestBody.contentLength() + &quot;-byte body)&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">          //人类不懂，就用二进制读出来</div><div class="line">          logger.log(&quot;--&gt; END &quot; + request.method() + &quot; (binary &quot;</div><div class="line">              + requestBody.contentLength() + &quot;-byte body omitted)&quot;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    long startNs = System.nanoTime();</div><div class="line">    Response response;</div><div class="line">    try &#123;</div><div class="line">      //请求开始</div><div class="line">      response = chain.proceed(request);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">      //请求异常</div><div class="line">      logger.log(&quot;&lt;-- HTTP FAILED: &quot; + e);</div><div class="line">      throw e;</div><div class="line">    &#125;</div><div class="line">    //请求花费时间</div><div class="line">    long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);</div><div class="line">    //响应体了</div><div class="line">    ResponseBody responseBody = response.body();</div><div class="line">    long contentLength = responseBody.contentLength();</div><div class="line">    String bodySize = contentLength != -1 ? contentLength + &quot;-byte&quot; : &quot;unknown-length&quot;;</div><div class="line">    //打印长度和响应码，响应信息，响应体对应请求体（这里要考虑重定向url），请求耗费时间，响应体长度</div><div class="line">    logger.log(&quot;&lt;-- &quot; + response.code() + &apos; &apos; + response.message() + &apos; &apos;</div><div class="line">        + response.request().url() + &quot; (&quot; + tookMs + &quot;ms&quot; + (!logHeaders ? &quot;, &quot;</div><div class="line">        + bodySize + &quot; body&quot; : &quot;&quot;) + &apos;)&apos;);</div><div class="line">    //打印响应头</div><div class="line">    if (logHeaders) &#123;</div><div class="line">      Headers headers = response.headers();</div><div class="line">      for (int i = 0, count = headers.size(); i &lt; count; i++) &#123;</div><div class="line">        logger.log(headers.name(i) + &quot;: &quot; + headers.value(i));</div><div class="line">      &#125;</div><div class="line">       //响应体不存在，等级不为body</div><div class="line">      if (!logBody || !HttpHeaders.hasBody(response)) &#123;</div><div class="line">        logger.log(&quot;&lt;-- END HTTP&quot;);</div><div class="line">      &#125; else if (bodyEncoded(response.headers())) &#123;</div><div class="line">        //响应体编码不对称</div><div class="line">        logger.log(&quot;&lt;-- END HTTP (encoded body omitted)&quot;);</div><div class="line">      &#125; else &#123;</div><div class="line">        //source，响应体来了</div><div class="line">        BufferedSource source = responseBody.source();</div><div class="line">        //设置最大缓存大小，当然是缓存整个body喽，全吃</div><div class="line">        source.request(Long.MAX_VALUE); </div><div class="line">        Buffer buffer = source.buffer()；</div><div class="line">        Charset charset = UTF8;</div><div class="line">        //拿到media类型对应的字符集</div><div class="line">        MediaType contentType = responseBody.contentType();</div><div class="line">        if (contentType != null) &#123;</div><div class="line">          try &#123;</div><div class="line">            charset = contentType.charset(UTF8);</div><div class="line">          &#125; catch (UnsupportedCharsetException e) &#123;</div><div class="line">            logger.log(&quot;&quot;);</div><div class="line">            logger.log(&quot;Couldn&apos;t decode the response body; charset is likely malformed.&quot;);</div><div class="line">            logger.log(&quot;&lt;-- END HTTP&quot;);</div><div class="line"></div><div class="line">            return response;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        //如果不是人类能看懂的，就不打印string形式的喽</div><div class="line">        if (!isPlaintext(buffer)) &#123;</div><div class="line">          logger.log(&quot;&quot;);</div><div class="line">          logger.log(&quot;&lt;-- END HTTP (binary &quot; + buffer.size() + &quot;-byte body omitted)&quot;);</div><div class="line">          return response;</div><div class="line">        &#125;</div><div class="line">        //是人类懂的，就开始读string喽</div><div class="line">        if (contentLength != 0) &#123;</div><div class="line">          logger.log(&quot;&quot;);</div><div class="line">          logger.log(buffer.clone().readString(charset));</div><div class="line">        &#125;</div><div class="line">        //最后打印body的长度</div><div class="line">        logger.log(&quot;&lt;-- END HTTP (&quot; + buffer.size() + &quot;-byte body)&quot;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return response;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   *判断缓存流的数据是否是人类能读懂的，哈哈，也就是abc123呗</div><div class="line">   */</div><div class="line">  static boolean isPlaintext(Buffer buffer) &#123;</div><div class="line">     //先判断是不是123abc能看懂的</div><div class="line">    try &#123;</div><div class="line">      Buffer prefix = new Buffer();</div><div class="line">      long byteCount = buffer.size() &lt; 64 ? buffer.size() : 64;</div><div class="line">      buffer.copyTo(prefix, 0, byteCount);</div><div class="line">      for (int i = 0; i &lt; 16; i++) &#123;</div><div class="line">        if (prefix.exhausted()) &#123;</div><div class="line">          break;</div><div class="line">        &#125;</div><div class="line">        //再判断是不是iso8859-1之类的，当然不是能懂的啊</div><div class="line">        int codePoint = prefix.readUtf8CodePoint();</div><div class="line">        if (Character.isISOControl(codePoint) &amp;&amp; !Character.isWhitespace(codePoint)) &#123;</div><div class="line">          return false;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      return true;</div><div class="line">    &#125; catch (EOFException e) &#123;</div><div class="line">      return false; // Truncated UTF-8 sequence.</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  //返回头中的编码是否存在并且不是identity，一般都是gzip,deflate,compress之中一个</div><div class="line">  private boolean bodyEncoded(Headers headers) &#123;</div><div class="line">    String contentEncoding = headers.get(&quot;Content-Encoding&quot;);</div><div class="line">    return contentEncoding != null &amp;&amp; !contentEncoding.equalsIgnoreCase(&quot;identity&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了终于撸了一遍源码，相信还有很多朋友没有看懂，解释这些源码干嘛啊，另外推荐一篇文章，大家踊跃去看吧(感谢<a href="http://home.cnblogs.com/u/yuanchongjie/" target="_blank" rel="external">ychongjie</a>的拦截器细致分析)：<br> <a href="http://www.cnblogs.com/yuanchongjie/p/4969326.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">链接直通车</a></p>
<blockquote>
<p>业余匆忙写作，不定期更新中~~~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Interceptor拦截器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[app沉浸式]]></title>
      <url>http://23.106.148.149/android/android/app%E6%B2%89%E6%B5%B8%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是沉浸式"><a href="#什么是沉浸式" class="headerlink" title="什么是沉浸式"></a>什么是沉浸式</h2>]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 沉浸 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时间复杂度O(n),空间复杂度O(1)]]></title>
      <url>http://23.106.148.149/other/other/%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="对n个数进行排序，时间复杂度O-n-空间复杂度O-1"><a href="#对n个数进行排序，时间复杂度O-n-空间复杂度O-1" class="headerlink" title="对n个数进行排序，时间复杂度O(n),空间复杂度O(1)"></a>对n个数进行排序，时间复杂度O(n),空间复杂度O(1)</h2><h3 id="一个算法题"><a href="#一个算法题" class="headerlink" title="一个算法题"></a>一个算法题</h3><p>转载的一个解释，暂时看懵了，先mark记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">看上去似乎任何已知的算法都无法做到，如果谁做到了，那么所有的排序方法：QuickSort，ShellSort，HeapSort，BubbleSort等等等等，都可以扔掉了，还要这些算法干吗阿，呵呵。不过实际上，在数字范围有限制的情况下，是有一个这样的算法的，只需要用一个数组记录每个数字出现次数就可以了。</div><div class="line"></div><div class="line">假定你的数字范围在0到65535范围之内，定义一个数组count[65536]（这个空间是常量，和n无关，所以是O(1) )，初值全部为0。</div><div class="line">那么假设有下面这些数字：</div><div class="line">100</div><div class="line">200</div><div class="line">300</div><div class="line">119</div><div class="line">0</div><div class="line">6</div><div class="line">...</div><div class="line">那么对于每个这个数字，都做在count中记录一下：</div><div class="line">100 =&gt; count[100]++</div><div class="line">200 =&gt; count[200]++</div><div class="line">300 =&gt; count[300]++</div><div class="line">119 =&gt; count[119]++</div><div class="line">0 =&gt; count[0]++</div><div class="line">6 =&gt; count[6]++</div><div class="line">...</div><div class="line">最后，遍历一边所有这些数字就可得到0~65535每个数字的个数（在count数组中），然后再顺序遍历count数组，count[n] = m，则输出m个n，（比如说有count[3] = 2, 那么说明有2个数字3），依次输出，最后可得结果。第一次遍历是O(n)，第二次遍历是O(1)，为常量，所以最后的时间复杂度为O(n)，而空间复杂度为O(1)</div><div class="line">这个算法很简单，相信大家都会，只是这个题太过于变态了，一般会把面试者吓住</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> O(n)和O(1) </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github搭建自己的博客]]></title>
      <url>http://23.106.148.149/other/other/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="准备工具node-js和git"><a href="#准备工具node-js和git" class="headerlink" title="准备工具node.js和git"></a>准备工具node.js和git</h2><blockquote>
<p>安装node.js<br><a href="https://nodejs.org/dist/v4.5.0/node-v4.5.0-x64.msi" target="_blank" rel="external">官网地址点这里</a></p>
<p>安装git<br><a href="https://git-scm.com/download/win" target="_blank" rel="external">window童鞋点这里</a><br><a href="https://git-scm.com/download/mac" target="_blank" rel="external">mac童鞋点这里</a><br><a href="https://git-scm.com/download/linux" target="_blank" rel="external">linux童鞋点这里</a><br><a id="more"></a></p>
</blockquote>
<h2 id="用hexo创建博客"><a href="#用hexo创建博客" class="headerlink" title="用hexo创建博客"></a>用hexo创建博客</h2><p>下面的命令，你们可以在cmd中也可以用git中的git bash都可以，输入每个命令之后别忘了一个enter执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir blog  创建一个博客文件夹</div><div class="line">cd blog   进入目录</div><div class="line">npm install hexo-cli -g(对这个文件夹全局安装依赖一次就够了，后面可以直接使用hexo相关的操作)</div><div class="line">hexo init(初始化hexo)</div><div class="line">hexo generate生成静态页面到public文件夹，等待deploy部署</div><div class="line">hexo server（测试页面） http://localhost:4000</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这一步就ok了，你可以到目录source/_posts看到md文件，这里就是我们以后要编辑的博客，当然不会md语法的请查看我的另一篇文章</p>
</blockquote>
<h2 id="开始写博客吧"><a href="#开始写博客吧" class="headerlink" title="开始写博客吧"></a>开始写博客吧</h2><blockquote>
<p>新建文章：如hexo new “新建文章的标题”<br>hexo new photo “标题”  生成一个带头图的文章，不过大可以不用，因为layout: photo经测试可以省略,直接写photos: 图片地址<br>新建了之后，要查看写的结果，就用执行命令hexo server，之后访问本地回流地址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
</blockquote>
<h2 id="部署的相关配置"><a href="#部署的相关配置" class="headerlink" title="部署的相关配置"></a>部署的相关配置</h2><p>编辑配置文件：vi _config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site 网站信息</div><div class="line">title: 网站标题</div><div class="line">subtitle: 网站副标题</div><div class="line">description: 网站描述</div><div class="line">author: 网站作者名字</div><div class="line">language: #网站语言,默认是英语(en)</div><div class="line">timezone: #网站时区</div><div class="line"></div><div class="line"># URL 网站设置</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: seayxu.github.io #网站的地址</div><div class="line">root: / #网站的根目录，如果是子文件夹下，则填写子文件夹路径</div><div class="line">permalink: :year/:month/:day/:title/ #文章链接地址格式 </div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory 目录设置</div><div class="line">source_dir: source #资源文件夹，默认是source</div><div class="line">public_dir: public #公共文件夹，默认是public</div><div class="line">tag_dir: tags #标签文件夹，默认是tags</div><div class="line">archive_dir: archives #档案文件夹，默认是archives</div><div class="line">category_dir: categories #分类文件夹，默认是categories</div><div class="line">code_dir: downloads/code #代码文件夹，默认是downloads/code</div><div class="line">i18n_dir: :lang #国际化文件夹，默认跟language相同</div><div class="line">skip_render: [] #不需要渲染的文件夹或文件夹,放在[]中</div><div class="line"></div><div class="line"># Writing 文章写作选项</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post #默认布局模板</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight: #高亮显示</div><div class="line">  enable: true #默认开启</div><div class="line">  line_number: true #显示行号，默认开启</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line">  </div><div class="line"># Category &amp; Tag 分类和标签</div><div class="line">default_category: uncategorized #默认分类名称</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format #日期/时间格式</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD #日期格式</div><div class="line">time_format: HH:mm:ss #时间格式</div><div class="line"></div><div class="line"># Pagination #分页信息</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10 #每页显示数量，设置为0表示不启用分页</div><div class="line">pagination_dir: page #分页文件夹名称</div><div class="line"></div><div class="line"># Extensions 扩展</div><div class="line">## Plugins: https://hexo.io/plugins/ #插件</div><div class="line">## Themes: https://hexo.io/themes/ #主题</div><div class="line">theme: landscape #主体名称</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">    #type 表示类型, 是 atom 还是 rss2.</div><div class="line">    #path 表示 Feed 路径</div><div class="line">    #limit 最多多少篇最近文章</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">  #path 表示 Sitemap 的路径. 默认为 sitemap.xml.</div><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div><div class="line"># Deployment 部署</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:xuywei/xuywei.github.io.git #github仓库地址</div><div class="line">  branch: master # github分支</div></pre></td></tr></table></figure></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><blockquote>
<p>创建github仓库：用户名.github.io 如：xuywei.github.io<br>然后执行hexo deploy就自动提交.deploy_git的文件到部署配置的github仓库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo generate生成静态页面（静态内容在public文件夹内，这个文件夹是以后发布到github中的文件）</div><div class="line">hexo clean删除public文件夹中的内容（其实并没有啊，大概是清理缓存的缘故）</div><div class="line">hexo deploy部署hexo</div></pre></td></tr></table></figure>
<p>部署的时候会提示没有发现git，使用npm install hexo-deployer-git –save安装git插件，再次重新部署就可以了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>安装node.js和git</li>
<li>安装hexo<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里记录一下mac系统中hexo安装失败出现警告错误信息，使用以下命令解决问题</p>
<blockquote>
<p>sudo npm install –unsafe-perm –verbose -g hexo</p>
</blockquote>
<ol>
<li><p>部署hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mkdir blog</div><div class="line">cd blog</div><div class="line">hexo init</div><div class="line">执行之后会生成以下文件</div><div class="line">.deploy：执行hexo deploy命令部署到GitHub上的内容目录</div><div class="line">public：执行hexo generate命令，输出的静态网页内容目录</div><div class="line">scaffolds：layout模板文件目录，其中的md文件可以添加编辑</div><div class="line">scripts：扩展脚本目录，这里可以自定义一些javascript脚本</div><div class="line">source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</div><div class="line">_drafts：草稿文章</div><div class="line">_posts：发布文章</div><div class="line">themes：主题文件目录</div><div class="line">_config.yml：全局配置文件，大多数的设置都在这里</div><div class="line">package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</div></pre></td></tr></table></figure>
</li>
<li><p>创建博客</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;博客的文章名&quot;</div><div class="line">hexo new page &quot;比如about页面&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean先清除缓存</div><div class="line">hexo generate生成页面</div></pre></td></tr></table></figure>
</li>
<li><p>本地发布</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server可以输入127.0.0.1:4000打开你的博客</div></pre></td></tr></table></figure>
</li>
<li><p>发布到github</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy将public中的静态页面复制到.deploy文件夹中并提交到github</div></pre></td></tr></table></figure>
</li>
<li><p>一些简易命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hexo命令缩写：</div><div class="line">          hexo n：hexo new</div><div class="line">          hexo g：hexo generate</div><div class="line">          hexo s：hexo server</div><div class="line">          hexo d：hexo deploy</div><div class="line">hexo命令组合：</div><div class="line">          hexo deploy -g</div><div class="line">          hexo server -g</div><div class="line">注意：命令不要随意组合，会没有效果</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="个人服务器搭建hexo平台"><a href="#个人服务器搭建hexo平台" class="headerlink" title="个人服务器搭建hexo平台"></a>个人服务器搭建hexo平台</h2><h3 id="创建专用的hexo用户"><a href="#创建专用的hexo用户" class="headerlink" title="创建专用的hexo用户"></a>创建专用的hexo用户</h3><p>添加用户<br>useradd -m hexo<br>赋予sudo权限<br>vim /etc/sudoers(没有这个文件的执行yum install -y sudo之后就会有了)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root    ALL=(ALL)    ALL</div><div class="line">hexo    ALL=(ALL)    ALL</div></pre></td></tr></table></figure></p>
<p>意思是让hexo用户也具有执行sudo的权限</p>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><h3 id="查看并确认ssh端口"><a href="#查看并确认ssh端口" class="headerlink" title="查看并确认ssh端口"></a>查看并确认ssh端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.出于安全考虑，某些服务商SSH端口并不是默认的22端口，而是一个随机的端口。</div><div class="line">SSH的配置文件sshd_config的路径是/etc/ssh/sshd_config。</div><div class="line"> vi /etc/ssh/sshd_config ，如下图红色的标识，port 22，去掉前面的#，然后把22改成你想要修改的端口，保存退出，重启一下SSH即可。SSH重启命令 /etc/init.d/sshd restart</div><div class="line">2.安装Web服务器软件</div><div class="line">这次我用了比较中庸的Apache，好比java，c等语言，相比于Nginx来说，好比python</div></pre></td></tr></table></figure>
<h4 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y httpd</div></pre></td></tr></table></figure>
<h4 id="配置Apache-Nginx-托管文件目录"><a href="#配置Apache-Nginx-托管文件目录" class="headerlink" title="配置Apache/Nginx 托管文件目录"></a>配置Apache/Nginx 托管文件目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">创建/var/www/hexo，用于托管，同时修改所有权和权限</div><div class="line">sudo mkdir -p /var/www/hexo（-p创建多级目录）</div><div class="line">chomd -r hexo:hexo /var/www/hexo修改目录用户hexo</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">chown就是修改 第一列内容的 ，chmod是修改 第3,4列内容的。</div><div class="line">chown用法</div><div class="line">用来更改某个目录或文件的用户名和用户组的</div><div class="line">chown 用户名:组名 文件路径（可以是就对路径也可以是相对路径）</div><div class="line">例1：chown root:root /tmp/tmp1</div><div class="line">就是把tmp下的tmp1的用户名和用户组改成root和root（只修改了tmp1的属组）.</div><div class="line">例2：chown -R root:root /tmp/tmp1</div><div class="line">就是把tmp下的tmp1下的所有文件的属组都改成root和root。</div><div class="line">chmod用法</div><div class="line">用来修改某个目录或文件的访问权限。</div><div class="line">语法：chmod [who] [+ | - | =] [mode] 文件名</div><div class="line"> 命令中各选项的含义为： </div><div class="line">操作对象who可是下述字母中的任一个或者它们的组合：</div><div class="line"> 　　u 表示“用户（user）”，即文件或目录的所有者。</div><div class="line"> 　　g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。</div><div class="line"> 　　o 表示“其他（others）用户”。</div><div class="line"> 　　a 表示“所有（all）用户”。它是系统默认值。</div><div class="line"> 操作符号可以是：</div><div class="line"> 　　+ 添加某个权限。</div><div class="line"> 　　- 取消某个权限。</div><div class="line"> 　　= 赋予给定权限并取消其他所有权限（如果有的话）。</div><div class="line"> 设置 mode 所表示的权限可用下述字母的任意组合：</div><div class="line"> 　　r 可读。</div><div class="line"> 　　w 可写。</div><div class="line">   　x 可执行。</div><div class="line"> 　　X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。</div><div class="line"> 　　s 在文件执行时把进程的属主或组ID置为该文件的文件属主。</div><div class="line">       方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。</div><div class="line"> 　　t 保存程序的文本到交换设备上。</div><div class="line"> 　　u 与文件属主拥有一样的权限。</div><div class="line"> 　　g 与和文件属主同组的用户拥有一样的权限。</div><div class="line"> 　　o 与其他用户拥有一样的权限。</div><div class="line"> 文件名：以空格分开的要改变权限的文件列表，支持通配符。</div></pre></td></tr></table></figure>
<h4 id="修改Apache的网络配置文件"><a href="#修改Apache的网络配置文件" class="headerlink" title="修改Apache的网络配置文件"></a>修改Apache的网络配置文件</h4><p>修改web配置/etc/httpd/conf/httpd.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ServerTokens Prod(默认为OS显示，意思是出现错误页时是否显示服务器操作系统名称)</div><div class="line">DocumentRoot &quot;/var/www/hexo&quot;（web网站文件所在处）</div><div class="line">DirectoryIndex index.html index.cgi index.php（首页样式）</div><div class="line">DefaultType text/plain（默认web类型）</div><div class="line">KeepAlive On是否持续连接（因为每次连接都得三次握手，如果是访问量不大，建议打开此项，如果网站访问量比较大关闭此项比较好），修改为：KeepAlive On 表示允许程序性联机</div><div class="line">ServerAdmin root@localhost（管理员的邮箱）</div><div class="line">重启Apache使之生效</div><div class="line">service httpd restart</div><div class="line">配置Nginx</div><div class="line">sudo apt-get install nginx</div><div class="line">修改 Nginx 的 default 设置</div><div class="line">sudo vim /etc/nginx/sites-available/default</div><div class="line">将其中的 root 指令指向 /var/www/hexo 目录</div><div class="line">root /var/www/hexo;        </div><div class="line">重启Nginx使之生效</div><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure></p>
<h3 id="创建Git-hooks"><a href="#创建Git-hooks" class="headerlink" title="创建Git hooks"></a>创建Git hooks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。在自动生成的 hooks 目录下创建一个新的钩子文件：</div><div class="line">vim /var/repo/hexo_static.git/hooks/post-receive</div><div class="line">在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</div><div class="line">#!/bin/bash</div><div class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/sxw_blog.git checkout -f</div><div class="line">保存并退出文件，并让该文件变为可执行文件。</div><div class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive</div></pre></td></tr></table></figure>
<h3 id="解析域名，hexo-clean-hexo-g-hexo-d看看好了没"><a href="#解析域名，hexo-clean-hexo-g-hexo-d看看好了没" class="headerlink" title="解析域名，hexo clean hexo g hexo d看看好了没"></a>解析域名，hexo clean hexo g hexo d看看好了没</h3><ol>
<li>写博客的一些小细节<br><img src="http://upload-images.jianshu.io/upload_images/1654122-36112496427111d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客的样式图"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">layout: photo #这个属性是博客的样式，有一个头图样式,如上图</div><div class="line">title: test2 #标题</div><div class="line">date: 2016-09-20 13:55:04 #写作时间</div><div class="line">tags: [haha,toot,huhu] #多个标签</div><div class="line">photos: http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg #图片的地址</div><div class="line">description: 你对本页的描述--- #只是对文章的一个描述，点开文章不会再有</div></pre></td></tr></table></figure>
</li>
</ol>
<p>10.原理+注意事项（必看）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">其实hexo也就是一套自动生成静态页面的开源项目，我们平时写博客用的是source文件夹，当hexo g的时候就是编译的时候，会在public里多出一个html文件，里面就是我们的博客内容了，所以，你看吧，source里都是我们的md文件，</div><div class="line">public里都是html文件，hexo就只是实现md---&gt;html，然后html你可以自己发布到web服务器，当然你也可以用它的配置自动部署到web服务器，hexo d就是部署的意思，hexo会根据你配置的git远程目录，自动执行push操作，把</div><div class="line">html文件同步到远程git仓库，当然，你可以将web服务器的地址直接设置为git仓库的文件夹，也可以通过设置hook，将同步的文件设置为dir，web服务器路径设置为工作路径，这样就会直接clone一套到这个工作路径。</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python教程(一)]]></title>
      <url>http://23.106.148.149/python/python/Python%E6%95%99%E7%A8%8B(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="Python的特点"><a href="#Python的特点" class="headerlink" title="Python的特点"></a>Python的特点</h2><p>Python是一门解释性语言，它是多种语言的精华的集合，它从Perl（另外一种远远超越了标准的shell脚本的脚本语言），python的正则表达式引擎就是基于Perl（它最大的优势就在于它的字符串模式匹配能力）。Python和java比较来说，他们都有类似的面向对象特性和语法，他们之间还诞生了一个可以在只有java环境中于运行Python程序的只用java编写的Python解释器Jython。JavaScript也是类似Python的面向对象脚本语言，但是JavaScript是基于原型设计的，Python是遵循面向对象系统，二者的类和对象有一些 差异。其他的就不记录了，太多了，记录主要的几个自己知道的语言。</p>
<ol>
<li>一般的Python解释器是用C编写的，又叫CPython</li>
<li>相对的用java编写的就是前面提到的JPython，不作描述。</li>
<li>IronPython，用C#语言完成，适用环境为.NET和Mono</li>
<li>Stackless是针对CPython的修改。<a id="more"></a>
<h2 id="Python起步"><a href="#Python起步" class="headerlink" title="Python起步"></a>Python起步</h2><h3 id="程序输出"><a href="#程序输出" class="headerlink" title="程序输出"></a>程序输出</h3></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;hello&apos;#交互式解释器调用repr()函数来显示对象</div><div class="line">&apos;hello&apos;</div><div class="line">&gt;&gt;&gt; print(&apos;hello&apos;)#print语句调用str()函数显示对象</div><div class="line">hello</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(&apos;姓名：%s 年龄：%d&apos;%(&apos;python&apos;,23))  # 输出格式化，占位符</div><div class="line">姓名：python 年龄：23</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user = input()  # 控制台输入</div><div class="line">&gt;? dlfkjs</div><div class="line">&gt;&gt;&gt; print(user)</div><div class="line">dlfkjs</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 3+2</div><div class="line">5</div><div class="line">&gt;&gt;&gt; 3-2</div><div class="line">1</div><div class="line">&gt;&gt;&gt; 3 * 2</div><div class="line">6</div><div class="line">&gt;&gt;&gt; 3 / 2</div><div class="line">1.5</div><div class="line">&gt;&gt;&gt; 3 // 2  # 整除</div><div class="line">1</div><div class="line">&gt;&gt;&gt; 3 ** 2  # 3的2次方</div><div class="line">9</div><div class="line">&gt;&gt;&gt; 3 % 2  # 模</div><div class="line">1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">## 标准比较运算符</div><div class="line">&gt;&gt;&gt; 1 &lt; 2</div><div class="line">True</div><div class="line">&gt;&gt;&gt; 1 &lt;= 2</div><div class="line">True</div><div class="line">&gt;&gt;&gt; 1 &gt; 2</div><div class="line">False</div><div class="line">&gt;&gt;&gt; 1 &gt;= 2</div><div class="line">False</div><div class="line">&gt;&gt;&gt; 1 ==2</div><div class="line">False</div><div class="line">&gt;&gt;&gt; 1 != 2</div><div class="line">True</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">## 逻辑运算符</div><div class="line">&gt;&gt;&gt; 4&gt;2 and 2&gt;4  # 变种&gt;&gt;&gt; 2 &lt; 4 &lt; 2</div><div class="line">False</div><div class="line">&gt;&gt;&gt; 4&gt;2 or 2&gt;4</div><div class="line">True</div><div class="line">&gt;&gt;&gt; not 2 &gt; 4</div><div class="line">True</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = 4</div><div class="line">&gt;&gt;&gt; num *= 10  # 相当于num = num * 10</div><div class="line">&gt;&gt;&gt; print(num)</div><div class="line">40</div><div class="line"># 不过python不支持num++ 和num--等，++num就是num，--num也相当于num</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[0]</div><div class="line">&apos;a&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;*3</div><div class="line">&apos;asdfasdfasdf&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[1 : 3]</div><div class="line">&apos;sd&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[1:]</div><div class="line">&apos;sdf&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[:3]</div><div class="line">&apos;asd&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[:]</div><div class="line">&apos;asdf&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[-1:]</div><div class="line">&apos;f&apos;</div><div class="line">&gt;&gt;&gt; &apos;asdf&apos;[:-3]</div><div class="line">&apos;a&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 列表是有序的，元组是有序的</div><div class="line">&gt;&gt;&gt; aList = [1, &apos;a&apos;, 2, &apos;b&apos;, 3, &apos;c&apos;]  # 列表切片还是列表</div><div class="line">&gt;&gt;&gt; aList[1:5]</div><div class="line">[&apos;a&apos;, 2, &apos;b&apos;, 3]</div><div class="line">&gt;&gt;&gt; aTuple = (1, &apos;a&apos;, 2, &apos;b&apos;, 3, &apos;c&apos;)  # 元组切片还是元组</div><div class="line">&gt;&gt;&gt; aTuple[1:5]</div><div class="line">(&apos;a&apos;, 2, &apos;b&apos;, 3)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 元素是无序的</div><div class="line">&gt;&gt;&gt; aDict = &#123;&apos;aaa&apos;:&apos;bbb&apos;&#125;</div><div class="line">&gt;&gt;&gt; aDict[&apos;111&apos;] = 333</div><div class="line">&gt;&gt;&gt; aDict</div><div class="line">&#123;&apos;111&apos;: 333, &apos;aaa&apos;: &apos;bbb&apos;&#125;</div><div class="line">&gt;&gt;&gt; aDict[&apos;222&apos;] = 444</div><div class="line">&gt;&gt;&gt; aDict</div><div class="line">&#123;&apos;111&apos;: 333, &apos;222&apos;: 444, &apos;aaa&apos;: &apos;bbb&apos;&#125;</div><div class="line">&gt;&gt;&gt; aDict.keys()</div><div class="line">dict_keys([&apos;111&apos;, &apos;222&apos;, &apos;aaa&apos;])</div><div class="line">&gt;&gt;&gt; aDict[&apos;111&apos;]</div><div class="line">333</div><div class="line">&gt;&gt;&gt; for key in aDict:</div><div class="line">...     print(&apos;key = &apos;,key,&apos;valse = &apos;,aDict[key])</div><div class="line">...     </div><div class="line">key =  111 valse =  333</div><div class="line">key =  222 valse =  444</div><div class="line">key =  aaa valse =  bbb</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"># if语句</div><div class="line">&gt;&gt;&gt; if 1 &gt; 2:</div><div class="line">...     print(&apos;1&apos;)</div><div class="line">... elif 2 &gt; 3:</div><div class="line">...     print(&apos;2&apos;)</div><div class="line">... else:</div><div class="line">...     print(&apos;3&apos;)</div><div class="line">...     </div><div class="line">3</div><div class="line"># while语句</div><div class="line">&gt;&gt;&gt; while x &lt; 3:</div><div class="line">...     print(x)</div><div class="line">...     x += 1</div><div class="line">...     </div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line"># for循环和range()内建函数</div><div class="line">&gt;&gt;&gt; foo = &apos;abcde&apos;  # 遍历字符串中的字符</div><div class="line">&gt;&gt;&gt; for i in range(len(foo)):</div><div class="line">...     print(foo[i],&apos;%d&apos;%i)</div><div class="line">...     </div><div class="line">a 0</div><div class="line">b 1</div><div class="line">c 2</div><div class="line">d 3</div><div class="line">遍历key，char的简易用法</div><div class="line">&gt;&gt;&gt; for i ,ch in enumerate(foo):</div><div class="line">...     print(ch,i)</div><div class="line">...     </div><div class="line">a 0</div><div class="line">b 1</div><div class="line">c 2</div><div class="line">d 3</div><div class="line">e 4</div><div class="line"># 列表解析</div><div class="line">&gt;&gt;&gt; squared = [x ** 2 for x in range(4)]</div><div class="line">&gt;&gt;&gt; for i in squared:</div><div class="line">...     print(i)</div><div class="line">...     </div><div class="line">0</div><div class="line">1</div><div class="line">4</div><div class="line">9</div><div class="line"># 后边还可以进行筛选循环之后的结果后，进行最后解析</div><div class="line">&gt;&gt;&gt; squared = [x ** 2 for x in range(4) if not x % 2]  # 0是False，1是True</div><div class="line">&gt;&gt;&gt; for i in squared:</div><div class="line">...     print(i)</div><div class="line">...     </div><div class="line">0</div><div class="line">4</div></pre></td></tr></table></figure>
<h2 id="异常的捕捉"><a href="#异常的捕捉" class="headerlink" title="异常的捕捉"></a>异常的捕捉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">try:</div><div class="line">    raiseexcept Exception as e:</div><div class="line">    t,v,tb = sys.exc_info()  # 异常的类型名称，异常实例，追溯异常流程对象traceback</div><div class="line">    print(t,v,tb)</div></pre></td></tr></table></figure>
<h2 id="文件和内建函数open-和file"><a href="#文件和内建函数open-和file" class="headerlink" title="文件和内建函数open()和file()"></a>文件和内建函数open()和file()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">fileName = &apos;.gitignore&apos;</div><div class="line">file = open(fileName, &apos;r&apos;)</div><div class="line">try:</div><div class="line">    for line in file:  # 最快的读取每一行文本的方法        </div><div class="line">        # lineline = line.rstrip(&apos;\n&apos;) # 去除每行末尾的\n符号</div><div class="line">        lineline = line.rstrip()  # 去除\n和空白符</div><div class="line">        print(lineline)</div><div class="line">    file.close()</div><div class="line">except Exception as e:  # python3要求我们的异常必须继承Exception类，这样可以捕获所有异常</div><div class="line">           print(e)</div><div class="line">print(&apos;-&apos;*20)</div><div class="line">file = open(fileName)</div><div class="line">try:</div><div class="line">    splitlines = file.readlines()  # 将所有行一次读出来    </div><div class="line">    # splitlines = file.read().splitlines()  # 将\n给去除</div><div class="line">    splitlines = file.read().split(&apos;\n&apos;)  # 另一种方法去除</div><div class="line">    file.close()</div><div class="line">    for line in splitlines:</div><div class="line">        print(line,end=&apos;&apos;)</div><div class="line">except Exception as e:  # python3要求我们的异常必须继承Exception类，这样可以捕获所有异常</div><div class="line">             print(e)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python教程(二)]]></title>
      <url>http://23.106.148.149/python/python/Python%E6%95%99%E7%A8%8B(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="函数的5类参数"><a href="#函数的5类参数" class="headerlink" title="函数的5类参数"></a>函数的5类参数</h2><blockquote>
<p>python函数可以传入5类参数，顺序为：必选参数-默认参数-可变参数/命名关键字参数-关键字参数。其中可变参数和命名关键字参数不能组合使用。</p>
</blockquote>
<a id="more"></a>
<h2 id="Python的函数"><a href="#Python的函数" class="headerlink" title="Python的函数"></a>Python的函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class TestClass(object):</div><div class="line">    version = 1.9</div><div class="line">    def __init__(self,nm=&apos;xuwei&apos;):</div><div class="line">        self.name = nm</div><div class="line">        print(nm)</div><div class="line">    def showName(self):</div><div class="line">        print(self.name)</div><div class="line">    def showVersion(self):</div><div class="line">        print(self.version)</div><div class="line">myClass=TestClass()</div><div class="line">myClass.showName()</div><div class="line">myClass.showVersion()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">sys.stdout.write(&apos;Hello World!\n&apos;)  # 代码的输出，调用了标准的write()方法</div><div class="line">print(sys.platform)  # 平台</div><div class="line">print(sys.version)  # python版本</div><div class="line"># help(dir)</div><div class="line">print(int(&apos;5&apos;))  # 5</div><div class="line">print(len(&apos;sdfas&apos;))  # 5</div><div class="line">print(list(range(5, 15, 2)))  # [5, 7, 9, 11, 13]</div><div class="line">print(str(3434))  # 3434</div><div class="line">print(type(56))  # &lt;class &apos;int&apos;&gt;</div><div class="line"># input(&apos;输入：&apos;)  # 输入：45</div><div class="line">print(dir(sys))  # sys模块中的所有属性</div><div class="line">print(dir)  # &lt;built-in function dir&gt;</div><div class="line">print(dir())  # 没有提供参数，就是显示全局变量的名字的列表print(type(dir))  # &lt;class &apos;builtin_function_or_method&apos;&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pip相关]]></title>
      <url>http://23.106.148.149/python/python/pip%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="pip更新"><a href="#pip更新" class="headerlink" title="pip更新"></a>pip更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python2 -m pip install --upgrade pip</div><div class="line">python3 -m pip install --upgrade pip #这里的python依据你的python名字，我个人改为了python2和python3，是为了兼容2个版本</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="win10中python2和python3并存，安装模块"><a href="#win10中python2和python3并存，安装模块" class="headerlink" title="win10中python2和python3并存，安装模块"></a>win10中python2和python3并存，安装模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python2 -m pip install xxx</div><div class="line">python3 -m pip install xxx</div></pre></td></tr></table></figure>
<h2 id="windows上python无法安装lxml"><a href="#windows上python无法安装lxml" class="headerlink" title="windows上python无法安装lxml"></a>windows上python无法安装lxml</h2><h3 id="下载模块"><a href="#下载模块" class="headerlink" title="下载模块"></a>下载模块</h3><p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml" target="_blank" rel="external">lxml</a>，从这里找到对应的whl文件下载</p>
<h3 id="安装wheel"><a href="#安装wheel" class="headerlink" title="安装wheel"></a>安装wheel</h3><p>pip3 install wheel</p>
<h3 id="安装下载的模块"><a href="#安装下载的模块" class="headerlink" title="安装下载的模块"></a>安装下载的模块</h3><p>安装lxml<br>pip3 install 下载的对应模块路径</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
